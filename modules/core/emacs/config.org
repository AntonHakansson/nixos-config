#+title: Emacs Config
#+startup: show2levels
#+property: header-args:emacs-lisp :tangle config.el :comments link :results none
#+property: header-args:elisp :exports code

Credits to [[https://tecosaur.github.io/emacs-config/config.html][Tecosaur's Doom Emacs Configuration]] for *a lot* of configuration snippets.

* Basic Configuration
** Personal Information
#+begin_src emacs-lisp
(setq user-full-name "Anton Hakansson"
      user-mail-address "anton.hakansson98@gmail.com")
#+end_src

** Better Defaults
#+begin_src emacs-lisp
(setq-default
 delete-by-moving-to-trash t)

(setq evil-want-fine-undo t         ; undoing a whole insert session is a bit too much. Make it more granular.
      truncate-string-ellipsis "â€¦") ; unicode ellipsis saves some space

(setq display-line-numbers-type 'relative)
#+end_src

Coming from =spacemacs=, I love the =SPC SPC= keybinding for =M-x= counsel.
#+begin_src emacs-lisp
(map! :leader
      :desc "M-x" "SPC" #'execute-extended-command)
#+end_src

** Windows
Switch to the new window after splitting
#+begin_src emacs-lisp
(setq evil-split-window-below t
      evil-vsplit-window-right t)
#+end_src

Make, thumb mouse buttons work as in a web browser.
#+begin_src emacs-lisp
(map! :n [mouse-8] #'better-jumper-jump-backward
      :n [mouse-9] #'better-jumper-jump-forward)
#+end_src

* Doom Configuration
** Modules
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:

Refer to the [[https://github.com/hlissner/doom-emacs/blob/master/init.example.el][Default Module Configuration]] for available options.

#+attr_html: :collapsed t
#+begin_src emacs-lisp :tangle init.el :noweb no-export :comments no
(doom! :completion
       <<doom-completion>>

       :ui
       <<doom-ui>>

       :editor
       <<doom-editor>>

       :emacs
       <<doom-emacs>>

       :term
       <<doom-term>>

       :checkers
       <<doom-checkers>>

       :tools
       <<doom-tools>>

       :os
       <<doom-os>>

       :lang
       <<doom-lang>>

       :email
       <<doom-email>>

       :app
       <<doom-app>>

       :config
       <<doom-config>>
       )
#+end_src

#+name: doom-completion
#+begin_src emacs-lisp
(company                     ; the ultimate code completion backend
 +childframe)                ; ... when your children are better than you
;;helm                       ; the *other* search engine for love and life
;;ido                        ; the other *other* search engine...
;; (ivy                      ; a search engine for love and life
;;  +icons                   ; ... icons are nice
;;  +prescient)              ; ... I know what I want(ed)
(vertico +icons)             ; the search engine of the future
#+end_src

#+name: doom-ui
#+begin_src emacs-lisp
;;deft                       ; notational velocity for Emacs
doom                         ; what makes DOOM look the way it does
doom-dashboard               ; a nifty splash screen for Emacs
doom-quit                    ; DOOM quit-message prompts when you quit Emacs
(emoji +unicode)             ; ðŸ™‚
hl-todo                      ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
ligatures                    ; ligatures and symbols to make your code pretty again
modeline                     ; snazzy, Atom-inspired modeline, plus API
nav-flash                    ; blink the current line after jumping
ophints                      ; highlight the region an operation acts on
(popup                       ; tame sudden yet inevitable temporary windows
 +all                        ; catch all popups that start with an asterix
 +defaults)                  ; default popup rules
treemacs                     ; a project drawer, like neotree but cooler
vc-gutter                    ; vcs diff in the fringe
vi-tilde-fringe              ; fringe tildes to mark beyond EOB
(window-select +numbers)     ; visually switch windows
workspaces                   ; tab emulation, persistence & separate workspaces
zen                          ; distraction-free coding or writing
#+end_src

#+name: doom-editor
#+begin_src emacs-lisp
(evil +everywhere)           ; come to the dark side, we have cookies
file-templates               ; auto-snippets for empty files
fold                         ; (nigh) universal code folding
(format)                     ; automated prettiness
multiple-cursors             ; editing in many places at once
;;parinfer                   ; turn lisp into python, sort of
rotate-text                  ; cycle region at point between text candidates
snippets                     ; my elves. They type so I don't have to
#+end_src

#+name: doom-emacs
#+begin_src emacs-lisp
(dired +icons +ranger)       ; making dired pretty [functional]
electric                     ; smarter, keyword-based electric-indent
(ibuffer +icons)             ; interactive buffer management
undo                         ; persistent, smarter undo for your inevitable mistakes
vc                           ; version-control and Emacs, sitting in a tree
#+end_src

#+name: doom-term
#+begin_src emacs-lisp
vterm                        ; the best terminal emulation in Emacs
#+end_src

#+name: doom-checkers
#+begin_src emacs-lisp
syntax                       ; tasing you for every semicolon you forget
(:if (executable-find "aspell") spell) ; tasing you for misspelling mispelling
grammar                      ; tasing grammar mistake every you make
#+end_src

#+name: doom-tools
#+begin_src emacs-lisp
ansible                      ; a crucible for infrastructure as code
direnv                       ; be direct about your environment
(docker                      ; port everything to containers
 +lsp)
editoronfig                  ; let someone else argue about tabs vs spaces
(eval +overlay)              ; run code, run (also, repls)
(lookup                      ; helps you navigate your code and documentation
 +dictionary                 ; dictionary/thesaurus is nice
 +docsets)                   ; ...or in Dash docsets locally
lsp                          ; Language Server Protocol
(magit                       ; a git porcelain for Emacs
 +forge)                     ; interface with git forges
make                         ; run make tasks from Emacs
pdf                          ; pdf enhancements
rgb                          ; creating color strings
upload                       ; map local to remote projects via ssh/ftp
#+end_src

#+name: doom-os
#+begin_src emacs-lisp
tty                          ; improve the terminal Emacs experience
#+end_src

#+name: doom-config
#+begin_src emacs-lisp
(default +bindings +smartparens)
#+end_src

#+name: doom-lang
#+begin_src emacs-lisp
(cc +lsp)                    ; C/C++/Obj-C madness
data                         ; config/data formats
emacs-lisp                   ; drown in parentheses
(go +lsp)                    ; the hipster dialect
json                         ; At least it ain't XML
(javascript +lsp)            ; all(hope(abandon(ye(who(enter(here))))))
(latex                       ; writing papers in Emacs has never been so fun
 +latexmk                    ; what else would you use?
 +cdlatex                    ; quick maths symbols
 +fold)                      ; fold the clutter away nicities
lua                          ; one-based indices? one-based indices
markdown                     ; writing docs for people to ignore
nix                          ; I hereby declare "nix geht mehr!"
(org                         ; organize your plain life in plain text
 +pretty                     ; yessss my pretties! (nice unicode symbols)
 +dragndrop                  ; drag & drop files/images into org buffers
 +noter                      ; enhanced PDF notetaking
 +jupyter                    ; ipython/jupyter support for babel
 +pandoc                     ; export-with-pandoc support
 +gnuplot                    ; who doesn't like pretty pictures
 +present                    ; using org-mode for presentations
 +roam2)                     ; wander around notes
(python +lsp +pyright)       ; beautiful is better than ugly
(rust +lsp)                  ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
scheme                       ; a fully conniving family of lisps
sh                           ; she sells {ba,z,fi}sh shells on the C xor
web                          ; the tubes
yaml                         ; JSON, but readable
(zig +lsp)                   ; C, but simpler
#+end_src

#+name: doom-email
#+begin_src emacs-lisp
(mu4e +org)
#+end_src

#+name: doom-app
#+begin_src emacs-lisp
everywhere
irc                 ; how neckbeards socialize
(rss +org)          ; emacs as an RSS reader
#+end_src
** Visual
Let's pick a cozy theme:
#+begin_src emacs-lisp
(setq doom-theme 'modus-operandi)
#+end_src

Then configure a supplementary font:
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Iosevka" :size 14)
      doom-big-font (font-spec :family "Iosevka" :size 18)
      doom-variable-pitch-font (font-spec :family "Iosevka Aile" :size 14)
      doom-unicode-font (font-spec :family "Iosevka")
      doom-serif-font (font-spec :family "Iosevka" :weight 'light))
#+end_src

* Package Configuration
** Evil
#+begin_src emacs-lisp
(after! evil
  (setq evil-kill-on-visual-paste nil)) ; don't add replaced text to the kill ring
#+end_src
** Company
#+begin_src emacs-lisp
(after! company
  (setq company-idle-delay 0.5
        company-minimum-prefix-length 2)
  (setq company-show-quick-access t))
#+end_src

#+begin_src emacs-lisp
(setq-default history-length 1000)
(setq-default prescient-history-length 1000)
#+end_src

** Snippets
Allow nested snippets.
#+begin_src emacs-lisp
(setq yas-triggers-in-field t)
#+end_src

** Emacs Everywhere
Make it easy to match window with a window manger rule.
#+begin_src emacs-lisp
(setq emacs-everywhere-frame-name-format "emacs-anywhere")
#+end_src

In =bspwm= we can match it with:
#+begin_src sh :tangle no
bspc rule -a 'Emacs:emacs-everywhere' state=floating sticky=on
#+end_src
** String inflection
For when we want to change the case pattern for some piece of code.
#+begin_src emacs-lisp :tangle packages.el
(package! string-inflection)
#+end_src

#+begin_src emacs-lisp
(use-package! string-inflection
  :commands (string-inflection-all-cycle
             string-inflection-toggle
             string-inflection-camelcase
             string-inflection-lower-camelcase
             string-inflection-kebab-case
             string-inflection-underscore
             string-inflection-capital-underscore
             string-inflection-upcase))
#+end_src
** Academic phrases
Fight the blank page!
#+begin_src emacs-lisp :tangle packages.el
(package! academic-phrases)
#+end_src
** CDLaTeX
#+begin_src emacs-lisp
(after! cdlatex
  (setq
   cdlatex-math-symbol-prefix (string-to-char ";")
   cdlatex-simplify-sub-super-scripts nil
   cdlatex-math-symbol-alist
   '( ;; adding missing functions to 3rd level symbols
     (?_    ("\\downarrow"  "\\Downarrow"           "\\inf"))
     (?2    ("^2"           "\\sqrt{?}"     ""     ))
     (?3    ("^3"           "\\sqrt[3]{?}"  ""     ))
     (?^    ("\\uparrow"    ""           "\\sup"))
     (?k    ("\\kappa"      ""           "\\ker"))
     (?m    ("\\mu"         ""           "\\lim"))
     (?c    (""             "\\circ"     "\\cos"))
     (?d    ("\\delta"      "\\partial"  "\\dim"))
     (?D    ("\\Delta"      "\\nabla"    "\\deg"))
     ;; no idea why \Phi isnt on 'F' in first place, \phi is on 'f'.
     (?F    ("\\Phi"))
     ;; now just conveniance
     (?v    ("\\lor"   "\\vdash"))
     (?V    (""        "\\vDash"))
     (?.    ("\\cdot"  "\\dots"))
     (?:    ("\\vdots" "\\ddots"))
     (?*    ("\\times" "\\star" "\\ast")))
   cdlatex-math-modify-alist
   '( ;; my own stuff
     (?B    "\\mathbb"        nil          t    nil  nil)
     (?t    "\\text"          nil          t    nil  nil)
     (?a    "\\abs"           nil          t    nil  nil)))
  )

(when EMACS28+
  (add-hook 'latex-mode-hook #'TeX-latex-mode))
#+end_src

** Org
:PROPERTIES:
:header-args:emacs-lisp: :tangle no :noweb-ref org-conf
:END:
Wrap whole org configuration within an src_elisp{(after! ...)} block.
#+begin_src emacs-lisp :noweb no-export :tangle config.el :noweb-ref nil
(after! org
  <<org-conf>>
)
#+end_src

*** Packages
:PROPERTIES:
:header-args:emacs-lisp: :tangle packages.el :comments no
:END:
**** Org Itself
#+begin_src emacs-lisp
(unpin! org) ; may be bugs
#+end_src
**** Eagerly toggle elements
***** Latex Fragments
Toggle latex fragments on/off when cursor enters/leaves a latex fragment.
#+begin_src emacs-lisp
(package! org-fragtog)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! org-fragtog
  :hook (org-mode . org-fragtog-mode))
#+end_src
***** Org elements
Toggle org elements(link, bold, etc.) on/off when cursor enters/leaves an org element.
#+begin_src emacs-lisp
(package! org-appear)
#+end_src
#+begin_src emacs-lisp :tangle config.el
(use-package! org-appear
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoemphasis t
        org-appear-autosubmarkers t
        org-appear-autolinks nil)
  ;; for proper first-time setup, `org-appear--set-elements'
  ;; needs to be run after other hooks have acted.
  (run-at-time nil nil #'org-appear--set-elements))
#+end_src
**** Pretty tables
#+begin_src emacs-lisp
(package! org-pretty-table
  :recipe (:host github :repo "Fuco1/org-pretty-table"))
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! org-pretty-table
  :commands (org-pretty-table-mode global-org-pretty-table-mode))
#+end_src

*** Behavior
**** Defaults
#+begin_src emacs-lisp :noweb-ref org-conf
(setq org-directory "~/documents/org" org-log-done 'time ; insert timestamp when an item
      org-list-allow-alphabetical t ; have a. A. a) A) list bullets
      org-export-in-background t
      org-catch-invisible-edits 'smart
      org-export-with-sub-superscripts '{} ; don't treat lone _ or ^ as sub/superscripts, require _{} or ^{}
      org-roam-directory (concat org-directory "/roam")
      )

(map! :map org-mode-map :n "SPC m l /" #'counsel-org-link)

(map! :map org-mode-map
       :leader (:prefix-map ("=" . "calc")
                            "=" #'calc-dispatch
                            "c" #'calc
                            "q" #'quick-calc
                            "g" #'calc-grab-region))

(setq +org-capture-todo-file "gtd/inbox.org"
      org-agenda-files
        (mapcar (lambda (f) (concat org-directory f))
          '("/gtd/inbox.org" "/gtd/gtd.org" "/gtd/someday.org" "/gtd/tickler.org"))
      org-capture-templates
        '(("t" "Todo [inbox]" entry
            (file+headline +org-capture-todo-file "Tasks")
            "* TODO %i%?")
        ("T" "Tickler" entry
            (file+headline "gtd/tickler.org" "Tickler")
            "* %i%? \n %U")
        ("n" "Personal notes" entry
            (file+headline +org-capture-notes-file "Inbox")
            "* %u %?\n%i\n%a" :prepend t)
        ("j" "Journal" entry
            (file+olp+datetree +org-capture-journal-file)
            "* %U %?\n%i\n%a" :prepend t)
        ("p" "Templates for projects")
        ("pt" "Project-local todo" entry
            (file+headline +org-capture-project-todo-file "Inbox")
            "* TODO %?\n%i\n%a" :prepend t)
        ("pn" "Project-local notes" entry
            (file+headline +org-capture-project-notes-file "Inbox")
            "* %U %?\n%i\n%a" :prepend t)
        ("pc" "Project-local changelog" entry
            (file+headline +org-capture-project-changelog-file "Unreleased")
            "* %U %?\n%i\n%a" :prepend t)
        ("o" "Centralized templates for projects")
        ("ot" "Project todo" entry #'+org-capture-central-project-todo-file "* TODO %?\n %i\n %a" :heading "Tasks" :prepend nil)
        ("on" "Project notes" entry #'+org-capture-central-project-notes-file "* %U %?\n %i\n %a" :heading "Notes" :prepend t)
        ("oc" "Project changelog" entry #'+org-capture-central-project-changelog-file "* %U %?\n %i\n %a" :heading "Changelog" :prepend t)))
#+end_src
**** Spellcheck
Turn on spellchecking.
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'turn-on-flyspell)
#+end_src
**** Flycheck with org-lint
Flycheck does not support Org and there are no off-the-shelf solution.

#+begin_src emacs-lisp
(defconst flycheck-org-lint-form
  (flycheck-prepare-emacs-lisp-form
    (require 'org)
    (require 'org-attach)
    (let ((source (car command-line-args-left))
          (process-default-directory default-directory))
      (with-temp-buffer
        (insert-file-contents source 'visit)
        (setq buffer-file-name source)
        (setq default-directory process-default-directory)
        (delay-mode-hooks (org-mode))
        (setq delayed-mode-hooks nil)
        (dolist (err (org-lint))
          (let ((inf (cl-second err)))
            (princ (elt inf 0))
            (princ ": ")
            (princ (elt inf 2))
            (terpri)))))))

(defconst flycheck-org-lint-variables
  '(org-directory
    org-id-locations
    org-id-locations-file
    org-attach-id-dir
    org-attach-use-inheritance
    org-attach-id-to-path-function-list
    org-link-parameters)
  "Variables inherited by the org-lint subprocess.")

(defun flycheck-org-lint-variables-form ()
  (require 'org-attach)  ; Needed to make variables available
  `(progn
     ,@(seq-map (lambda (opt) `(setq-default ,opt ',(symbol-value opt)))
                (seq-filter #'boundp flycheck-org-lint-variables))))

(flycheck-define-checker org-lint
  "Org buffer checker using `org-lint'."
  :command ("emacs" (eval flycheck-emacs-args)
            "--eval" (eval (concat "(add-to-list 'load-path \""
                                   (file-name-directory (locate-library "org"))
                                   "\")"))
            "--eval" (eval (flycheck-sexp-to-string
                            (flycheck-org-lint-variables-form)))
            "--eval" (eval flycheck-org-lint-form)
            "--" source)
  :error-patterns
  ((error line-start line ": " (message) line-end))
  :modes org-mode)
#+end_src

#+begin_src emacs-lisp
(add-to-list 'flycheck-checkers 'org-lint)
#+end_src

**** View Exported file
~:localleader v~ has no pre-existing binding, so let's use it to view possible output files.

#+begin_src emacs-lisp
(map! :map org-mode-map
      :localleader
      :desc "View exported file"
      "v" #'org-view-output-file)

(defvar org-view-output-file-extensions '("pdf" "md" "txt" "tex" "html")
        "Search for output files with these extensions, in order, viewing the first that matches")

(defvar org-view-external-file-extensions '("html") "File extensions that should be opened externally")

(defun org-view-output-file (&optional org-file-path)
        "Visit buffer open on the first output file (if any) found, using 'org-view-output-file-extensions'"
        (interactive)
        (let* ((org-file-path (or org-file-path (buffer-file-name) ""))
               (dir (file-name-directory org-file-path))
               (basename (file-name-base org-file-path))
               (output-file nil))
          (dolist (extension org-view-output-file-extensions)
            (unless output-file
              (when (file-exists-p (concat dir basename "." extension))
                (setq output-file (concat dir basename "." extension)))))
          (if output-file
              (if (member (file-name-extension output-file) org-view-external-file-extensions)
                  (browse-url-xdg-open output-file)
                (pop-to-buffer (or (find-buffer-visiting output-file)
                                   (find-file-noselect output-file))))
              (message "No exported file found"))))
#+end_src

**** CDLaTeX
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'turn-on-org-cdlatex)
#+end_src
**** Snippet Helpers
I often want to set =src-block= headers, and it's a pain to
+ type them out
+ remember what the accepted values are
+ oh, and specifying the same language again and again

We can solve this in three steps
+ having one-letter snippets, conditioned on ~(point)~ being within a src header
+ creating a nice prompt showing accepted values and the current default
+ pre-filling the =src-block= language with the last language used

For header args, the keys I'll use are
+ =r= for =:results=
+ =e= for =:exports=
+ =v= for =:eval=
+ =s= for =:session=
+ =d= for =:dir=

#+begin_src emacs-lisp
(defun +yas/org-src-header-p ()
  "Determine whether `point' is within a src-block header or header-args."
  (pcase (org-element-type (org-element-context))
    ('src-block (< (point) ; before code part of the src-block
                   (save-excursion (goto-char (org-element-property :begin (org-element-context)))
                                   (forward-line 1)
                                   (point))))
    ('inline-src-block (< (point) ; before code part of the inline-src-block
                          (save-excursion (goto-char (org-element-property :begin (org-element-context)))
                                          (search-forward "]{")
                                          (point))))
    ('keyword (string-match-p "^header-args" (org-element-property :value (org-element-context))))))
#+end_src

Now let's write a function we can reference in yasnippets to produce a nice
interactive way to specify header args.

#+begin_src emacs-lisp
(defun +yas/org-prompt-header-arg (arg question values)
  "Prompt the user to set ARG header property to one of VALUES with QUESTION.
The default value is identified and indicated. If either default is selected,
or no selection is made: nil is returned."
  (let* ((src-block-p (not (looking-back "^#\\+property:[ \t]+header-args:.*" (line-beginning-position))))
         (default
           (or
            (cdr (assoc arg
                        (if src-block-p
                            (nth 2 (org-babel-get-src-block-info t))
                          (org-babel-merge-params
                           org-babel-default-header-args
                           (let ((lang-headers
                                  (intern (concat "org-babel-default-header-args:"
                                                  (+yas/org-src-lang)))))
                             (when (boundp lang-headers) (eval lang-headers t)))))))
            ""))
         default-value)
    (setq values (mapcar
                  (lambda (value)
                    (if (string-match-p (regexp-quote value) default)
                        (setq default-value
                              (concat value " "
                                      (propertize "(default)" 'face 'font-lock-doc-face)))
                      value))
                  values))
    (let ((selection (consult--read values :prompt question :default default-value)))
      (unless (or (string-match-p "(default)$" selection)
                  (string= "" selection))
        selection))))
#+end_src

Finally, we fetch the language information for new source blocks.

Since we're getting this info, we might as well go a step further and also
provide the ability to determine the most popular language in the buffer that
doesn't have any =header-args= set for it (with =#+properties=).

#+begin_src emacs-lisp
(defun +yas/org-src-lang ()
  "Try to find the current language of the src/header at `point'.
Return nil otherwise."
  (let ((context (org-element-context)))
    (pcase (org-element-type context)
      ('src-block (org-element-property :language context))
      ('inline-src-block (org-element-property :language context))
      ('keyword (when (string-match "^header-args:\\([^ ]+\\)" (org-element-property :value context))
                  (match-string 1 (org-element-property :value context)))))))

(defun +yas/org-last-src-lang ()
  "Return the language of the last src-block, if it exists."
  (save-excursion
    (beginning-of-line)
    (when (re-search-backward "^[ \t]*#\\+begin_src" nil t)
      (org-element-property :language (org-element-context)))))

(defun +yas/org-most-common-no-property-lang ()
  "Find the lang with the most source blocks that has no global header-args, else nil."
  (let (src-langs header-langs)
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward "^[ \t]*#\\+begin_src" nil t)
        (push (+yas/org-src-lang) src-langs))
      (goto-char (point-min))
      (while (re-search-forward "^[ \t]*#\\+property: +header-args" nil t)
        (push (+yas/org-src-lang) header-langs)))

    (setq src-langs
          (mapcar #'car
                  ;; sort alist by frequency (desc.)
                  (sort
                   ;; generate alist with form (value . frequency)
                   (cl-loop for (n . m) in (seq-group-by #'identity src-langs)
                            collect (cons n (length m)))
                   (lambda (a b) (> (cdr a) (cdr b))))))

    (car (cl-set-difference src-langs header-langs :test #'string=))))
#+end_src
**** lsp-mode in src blocks
#+begin_src emacs-lisp
(cl-defmacro lsp-org-babel-enable (lang)
  "Support LANG in org source code block."
  (setq centaur-lsp 'lsp-mode)
  (cl-check-type lang stringp)
  (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
         (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
    `(progn
       (defun ,intern-pre (info)
         (let ((file-name (->> info caddr (alist-get :file))))
           (unless file-name
             (setq file-name (make-temp-file "babel-lsp-")))
           (setq buffer-file-name file-name)
           (lsp-deferred)))
       (put ',intern-pre 'function-documentation
            (format "Enable lsp-mode in the buffer of org source block (%s)."
                    (upcase ,lang)))
       (if (fboundp ',edit-pre)
           (advice-add ',edit-pre :after ',intern-pre)
         (progn
           (defun ,edit-pre (info)
             (,intern-pre info))
           (put ',edit-pre 'function-documentation
                (format "Prepare local buffer environment for org source block (%s)."
                        (upcase ,lang))))))))
(defvar org-babel-lang-list
  '("python" "ipython" "emacs-lisp" "elisp" "c"))
(dolist (lang org-babel-lang-list)
  (eval `(lsp-org-babel-enable ,lang)))
#+end_src

**** Translate capital keywords (old) to lower case (new)
Everyone used to use ~#+CAPITAL~ keywords. Then people realized that ~#+lowercase~ is actually both marginally easier and visually nicer, so now the capital version is just used in the manual.

#+begin_src emacs-lisp
(defun my/org-syntax-convert-keyword-case-to-lower ()
  "Convert all #+KEYWORDS to #+keywords."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (let ((count 0)
          (case-fold-search nil))
      (while (re-search-forward "^[ \t]*#\\+[A-Z_]+" nil t)
        (unless (s-matches-p "RESULTS" (match-string 0))
          (replace-match (downcase (match-string 0)) t)
          (setq count (1+ count))))
      (message "Replaced %d occurances" count))))
#+end_src
**** Create figures with =draw.io=
#+begin_src emacs-lisp
(defvar my/drawio-svg-template
"
<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">
<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" width=\"1px\" height=\"1px\" viewBox=\"-0.5 -0.5 1 1\" content=\"&lt;mxfile host=&quot;Electron&quot; modified=&quot;2021-04-06T19:59:21.217Z&quot; agent=&quot;5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/13.6.2 Chrome/83.0.4103.122 Electron/9.2.0 Safari/537.36&quot; etag=&quot;jvakbBwTCuQwA_FwzQcD&quot; version=&quot;13.6.2&quot; type=&quot;device&quot;&gt;&lt;diagram id=&quot;oKLLFZHwsVmmPUDXrigO&quot; name=&quot;Page-1&quot;&gt;ddHBDsIgDADQr+HOwEXvc+rF0w6eyaiDhK0Lwwz9erfAnGR6IeW1UFIIL1p/tqJXV5RgCKPSE34kjO13+bTO8IzAWYDGahkoW6HSL4hIoz60hCEpdIjG6T7FGrsOapeYsBbHtOyOJu3aiwY2UNXCbPWmpVNBDzld/QK6UUvnjMZMK5biCIMSEscv4iXhhUV0IWp9AWae3TKXcO70J/t5mIXO/TgwBevd0yb5IF6+AQ==&lt;/diagram&gt;&lt;/mxfile&gt;\"><defs/><g/></svg>
"
"Template file for draw.io"
  )

(defun my/drawio-create (&optional template-path)
  (interactive)
  (require 'org-download)
  (let*((basename (read-string (format "Filename [%s]: " "figure.svg") nil nil "figure.svg"))
        (dir org-download-image-dir)
        (filepath (concat dir "/" (org-download-file-format-default basename)))
        (org-download-image-org-width 400))
      (make-directory dir t)
      (write-region my/drawio-svg-template nil filepath)
      (start-process-shell-command "drawio" nil (format "drawio %s" filepath)) ; open svg file
      (org-download-insert-link basename filepath)
    )
  )

(defun my/drawio-edit ()
  (interactive)
  (let ((context (org-element-context)))
    (if (not (eq (car-safe context) 'link))
        (user-error "Not on a link")
      (start-process-shell-command
       "drawio"
       "drawio"
       (format "drawio %s"
               (shell-quote-wildcard-pattern
                (url-unhex-string (plist-get (cadr context) :path)))))))
  )
#+end_src
*** Emacs Visuals
**** Org-modern

=org-modern= implements a "modern" style of an Org buffer that looks amazing; let's use it.

#+begin_src emacs-lisp :tangle packages.el
(package! org-modern)
#+end_src

#+begin_src emacs-lisp
(use-package! org-modern
  :hook (org-mode . org-modern-mode)
  :commands org-modern-mode)
#+end_src

=org-modern= expects that ~org-indent-mode~ is off.
#+begin_src emacs-lisp
(setq org-startup-indented nil)
#+end_src

**** Font Display
Mixed pitch is great. As is ~+org-pretty-mode~.
#+begin_src emacs-lisp
(add-hook 'org-mode-hook #'mixed-pitch-mode)
(add-hook 'org-mode-hook #'+org-pretty-mode)
#+end_src

Let's make headings a bit bigger
#+begin_src emacs-lisp
(custom-set-faces!
  '(outline-1 :weight extra-bold :height 1.25)
  '(outline-2 :weight bold :height 1.15)
  '(outline-3 :weight bold :height 1.12)
  '(outline-4 :weight semi-bold :height 1.09)
  '(outline-5 :weight semi-bold :height 1.06)
  '(outline-6 :weight semi-bold :height 1.03)
  '(outline-8 :weight semi-bold)
  '(outline-9 :weight semi-bold)
  '(org-level-1 :weight semi-bold :height 1.25)
  '(org-level-2 :weight semi-bold :height 1.15)
  '(org-level-3 :weight semi-bold :height 1.12)
  '(org-level-4 :weight semi-bold :height 1.09)
  '(org-level-5 :weight semi-bold :height 1.06)
  '(org-level-6 :weight semi-bold :height 1.03)
  '(org-level-7 :weight semi-bold)
  '(org-level-8 :weight semi-bold)
  )
#+end_src

And the same with the title.
#+begin_src emacs-lisp
(custom-set-faces!
  '(org-document-title :height 1.2))
#+end_src

It seems reasonable to have deadlines in the error face when they're passed.
#+begin_src emacs-lisp
(setq org-agenda-deadline-faces
      '((1.001 . error)
        (1.0 . org-warning)
        (0.5 . org-upcoming-deadline)
        (0.0 . org-upcoming-distant-deadline)))
#+end_src

We can then have quote blocks stand out a bit more by making them /italic/.
#+begin_src emacs-lisp
(setq org-fontify-quote-and-verse-blocks t)
#+end_src

**** Symbols
It's also nice to change the character used for collapsed items (by default ~â€¦~).
#+begin_src emacs-lisp
(setq org-ellipsis "â€¦")
#+end_src

**** Fontifying inline src blocks
Org does lovely things with =#+begin_src= blocks, like using font-lock for
language's major-mode behind the scenes and pulling out the lovely colourful
results. By contrast, inline =src_= blocks are somewhat neglected.

I am not the first person to feel this way, thankfully others have [[https://stackoverflow.com/questions/20309842/how-to-syntax-highlight-for-org-mode-inline-source-code-src-lang/28059832][taken to
stackexchange]] to voice their desire for inline src fontification. I was going to
steal their work, but unfortunately they didn't perform /true/ source code
fontification, but simply applied the =org-code= face to the content.

We can do better than that, and we shall! Using ~org-src-font-lock-fontify-block~
we can apply language-appropriate syntax highlighting. Then, continuing on to
={{{results(...)}}}= , it can have the =org-block= face applied to match, and then
the value-surrounding constructs hidden by mimicking the behaviour of
~prettify-symbols-mode~.

#+begin_warning
This currently only highlights a single inline src block per line.
I have no idea why it stops, but I'd rather it didn't.
If you have any idea what's going on or how to fix this /please/ get in touch.
#+end_warning

#+begin_src emacs-lisp
(defvar org-prettify-inline-results t
  "Whether to use (ab)use prettify-symbols-mode on {{{results(...)}}}.
Either t or a cons cell of strings which are used as substitutions
for the start and end of inline results, respectively.")

(defvar org-fontify-inline-src-blocks-max-length 200
  "Maximum content length of an inline src block that will be fontified.")

(defun org-fontify-inline-src-blocks (limit)
  "Try to apply `org-fontify-inline-src-blocks-1'."
  (condition-case nil
      (org-fontify-inline-src-blocks-1 limit)
    (error (message "Org mode fontification error in %S at %d"
                    (current-buffer)
                    (line-number-at-pos)))))

(defun org-fontify-inline-src-blocks-1 (limit)
  "Fontify inline src_LANG blocks, from `point' up to LIMIT."
  (let ((case-fold-search t)
        (initial-point (point)))
    (while (re-search-forward "\\_<src_\\([^ \t\n[{]+\\)[{[]?" limit t) ; stolen from `org-element-inline-src-block-parser'
      (let ((beg (match-beginning 0))
            pt
            (lang-beg (match-beginning 1))
            (lang-end (match-end 1)))
        (remove-text-properties beg lang-end '(face nil))
        (font-lock-append-text-property lang-beg lang-end 'face 'org-meta-line)
        (font-lock-append-text-property beg lang-beg 'face 'shadow)
        (font-lock-append-text-property beg lang-end 'face 'org-block)
        (setq pt (goto-char lang-end))
        ;; `org-element--parse-paired-brackets' doesn't take a limit, so to
        ;; prevent it searching the entire rest of the buffer we temporarily
        ;; narrow the active region.
        (save-restriction
          (narrow-to-region beg (min (point-max) limit (+ lang-end org-fontify-inline-src-blocks-max-length)))
          (when (ignore-errors (org-element--parse-paired-brackets ?\[))
            (remove-text-properties pt (point) '(face nil))
            (font-lock-append-text-property pt (point) 'face 'org-block)
            (setq pt (point)))
          (when (ignore-errors (org-element--parse-paired-brackets ?\{))
            (remove-text-properties pt (point) '(face nil))
            (font-lock-append-text-property pt (1+ pt) 'face '(org-block shadow))
            (unless (= (1+ pt) (1- (point)))
              (if org-src-fontify-natively
                  (org-src-font-lock-fontify-block (buffer-substring-no-properties lang-beg lang-end) (1+ pt) (1- (point)))
                (font-lock-append-text-property (1+ pt) (1- (point)) 'face 'org-block)))
            (font-lock-append-text-property (1- (point)) (point) 'face '(org-block shadow))
            (setq pt (point))))
        (when (and org-prettify-inline-results (re-search-forward "\\= {{{results(" limit t))
          (font-lock-append-text-property pt (1+ pt) 'face 'org-block)
          (goto-char pt))))
    (when org-prettify-inline-results
      (goto-char initial-point)
      (org-fontify-inline-src-results limit))))

(defun org-fontify-inline-src-results (limit)
  (while (re-search-forward "{{{results(\\(.+?\\))}}}" limit t)
    (remove-list-of-text-properties (match-beginning 0) (point)
                                    '(composition
                                      prettify-symbols-start
                                      prettify-symbols-end))
    (font-lock-append-text-property (match-beginning 0) (match-end 0) 'face 'org-block)
    (let ((start (match-beginning 0)) (end (match-beginning 1)))
      (with-silent-modifications
        (compose-region start end (if (eq org-prettify-inline-results t) "âŸ¨" (car org-prettify-inline-results)))
        (add-text-properties start end `(prettify-symbols-start ,start prettify-symbols-end ,end))))
    (let ((start (match-end 1)) (end (point)))
      (with-silent-modifications
        (compose-region start end (if (eq org-prettify-inline-results t) "âŸ©" (cdr org-prettify-inline-results)))
        (add-text-properties start end `(prettify-symbols-start ,start prettify-symbols-end ,end))))))

(defun org-fontify-inline-src-blocks-enable ()
  "Add inline src fontification to font-lock in Org.
Must be run as part of `org-font-lock-set-keywords-hook'."
  (setq org-font-lock-extra-keywords
        (append org-font-lock-extra-keywords '((org-fontify-inline-src-blocks)))))

(add-hook 'org-font-lock-set-keywords-hook #'org-fontify-inline-src-blocks-enable)
#+end_src

Doom theme's extra fontification is more problematic than helpful.
#+begin_src emacs-lisp
(setq doom-themes-org-fontify-special-tags nil)
#+end_src

*** LaTeX Export
#+begin_src emacs-lisp
(setq org-latex-pdf-process '("latexmk -f -pdf -%latex -shell-escape -interaction=nonstopmode -output-directory=%o %f"))
#+end_src
*** Snippets
:PROPERTIES:
:header-args:snippet: :mkdirp t
:END:

#+begin_src snippet :tangle snippets/org-mode/__
# -*- mode: snippet -*-
# name: Org template
# --
#+title: ${1:`(s-titleized-words (replace-regexp-in-string "^[0-9]\\{4\\}-[0-9][0-9]-[0-9][0-9]-" "" (file-name-base (or buffer-file-name "new buffer"))))`}
#+author: ${2:`(user-full-name)`}
#+date: ${3:`(format-time-string "%Y-%m-%d")`}

$0
#+end_src

#+begin_src snippet :tangle snippets/org-mode/inline_math
# -*- mode: snippet -*-
# name: inline math
# key: m
# condition: t
# --
\\( `%`$0 \\)
#+end_src

#+begin_src snippet :tangle snippets/org-mode/display_math
# -*- mode: snippet -*-
# name: display math
# key: M
# condition: t
# --
\\[ `%`$0 \\]
#+end_src

#+begin_src snippet :tangle snippets/org-mode/src
# -*- mode: snippet -*-
# name: #+begin_src
# uuid: src
# key: src
# --
#+begin_src ${1:`(or (+yas/org-last-src-lang) "?")`}
`%`$0
,#+end_src
#+end_src

** Latex
#+begin_src emacs-lisp
(setq TeX-save-query nil
      TeX-show-compilation t
      TeX-command-extra-options "-shell-escape")

(after! latex
  (add-to-list 'TeX-command-list '("XeLaTeX" "%`xelatex%(mode)%' %t" TeX-run-TeX nil t)))
#+end_src

#+begin_src emacs-lisp
(setq +latex-viewers '(pdf-tools zathura okular skim sumatrapdf))
#+end_src

*** Latex Auto activating snippets
#+begin_src emacs-lisp :tangle packages.el
(package! laas :recipe (:host github :repo "tecosaur/LaTeX-auto-activating-snippets"))
#+end_src

#+begin_src emacs-lisp
(use-package laas
  :hook (LaTeX-mode . laas-mode))
#+end_src

** RSS Reader
#+begin_src emacs-lisp
(map! :map elfeed-search-mode-map
      :after elfeed-search
      [remap kill-this-buffer] "q"
      [remap kill-buffer] "q"
      :n doom-leader-key nil
      :n "q" #'+rss/quit
      :n "e" #'elfeed-update
      :n "r" #'elfeed-search-untag-all-unread
      :n "u" #'elfeed-search-tag-all-unread
      :n "s" #'elfeed-search-live-filter
      :n "RET" #'elfeed-search-show-entry
      :n "p" #'elfeed-show-pdf
      :n "+" #'elfeed-search-tag-all
      :n "-" #'elfeed-search-untag-all
      :n "S" #'elfeed-search-set-filter
      :n "b" #'elfeed-search-browse-url
      :n "y" #'elfeed-search-yank)
(map! :map elfeed-show-mode-map
      :after elfeed-show
      [remap kill-this-buffer] "q"
      [remap kill-buffer] "q"
      :n doom-leader-key nil
      :nm "q" #'+rss/delete-pane
      :nm "o" #'ace-link-elfeed
      :nm "RET" #'org-ref-elfeed-add
      :nm "n" #'elfeed-show-next
      :nm "N" #'elfeed-show-prev
      :nm "p" #'elfeed-show-pdf
      :nm "+" #'elfeed-show-tag
      :nm "-" #'elfeed-show-untag
      :nm "s" #'elfeed-show-new-live-search
      :nm "y" #'elfeed-show-yank)

(add-hook! 'elfeed-show-mode-hook 'mixed-pitch-mode)
(add-hook! 'elfeed-search-mode-hook 'elfeed-update)
#+end_src
** Mail
#+begin_src emacs-lisp
(after! mu4e
  (setq sendmail-program (executable-find "msmtp")
        send-mail-function #'smtpmail-send-it
        message-sendmail-f-is-evil t
        message-sendmail-extra-arguments '("--read-envelope-from")
        message-send-mail-function #'message-send-mail-with-sendmail)

  (set-email-account! "personal"
                      '((mu4e-sent-folder       . "/personal/Sent")
                        (mu4e-drafts-folder     . "/personal/Drafts")
                        (mu4e-trash-folder      . "/personal/Trash")
                        (mu4e-refile-folder     . "/personal/Archive")
                        (smtpmail-smtp-user     . "anton@hakanssn.com"))
                      t)
  (set-email-account! "webmaster"
                      '((mu4e-sent-folder       . "/webmaster/Sent")
                        (mu4e-drafts-folder     . "/webmaster/Drafts")
                        (mu4e-trash-folder      . "/webmaster/Trash")
                        (mu4e-refile-folder     . "/webmaster/Archive")
                        (smtpmail-smtp-user     . "webmaster@hakanssn.com"))
                      t)
  )
#+end_src
** Calculator
*** Defaults
#+begin_src emacs-lisp
(setq calc-angle-mode 'rad  ; radians are rad
      calc-symbolic-mode t  ; keeps expressions like \sqrt{2} irrational for as long as possible
      calc-simplify-mode 'none)
#+end_src
*** Embedded calc
#+begin_src emacs-lisp
(map! :map calc-mode-map
      :after calc
      :localleader
      :desc "Embedded calc (toggle)" "e" #'calc-embedded)
(map! :map org-mode-map
      :after org
      :localleader
      :desc "Embedded calc (toggle)" "E" #'calc-embedded)
(map! :map latex-mode-map
      :after latex
      :localleader
      :desc "Embedded calc (toggle)" "e" #'calc-embedded)
#+end_src
